"""
Django settings for tmessage project.

Generated by 'django-admin startproject' using Django 1.11.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import re

import sys

from tmessage.decouple import config, Csv

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)
LOGGING_LEVEL = config('LOGGING_LEVEL', default='INFO')

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=Csv())

PROJECT_NAME = 'tmessage'
TEMPLATE_THEME = 'default'
TYPE = 'bot'

OFFENSE_LIMIT = 3
SLOG_VALUE = 1459929
PAGE_SIZE = 1000

APPEND_SLASH = False
LOGIN_URL = 'account:login'
LOGOUT_URL = 'account:logout'
LOGIN_REDIRECT_URL = 'core:home'
LOGOUT_REDIRECT_URL = 'core:home'

REDIS_SERVER = config('REDIS_SERVER', default='localhost')
REDIS_PORT = config('REDIS_PORT', default=6379, cast=int)

API_KEY = ['lkjhyg43787686d*c6876v8sd86s8dkbkjgv',]


SITE_ID = 1
COY_NAME= 'Telegram Modulator'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='localhost')
EMAIL_HOST = config('EMAIL_HOST', default='localhost')
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)

EMAIL_CONNECTIONS = {
    'default': {
        'host': EMAIL_HOST,
        'username': EMAIL_HOST_USER,
        'password': EMAIL_HOST_PASSWORD,
        'port': EMAIL_PORT,
        'use_tls': EMAIL_USE_TLS,
    },
    'no-reply': {
        'host': config('NO_REPLY_EMAIL_HOST', default='localhost'),
        'username': config('NO_REPLY_EMAIL_HOST_USER', default=''),
        'password': config('NO_REPLY_EMAIL_HOST_PASSWORD', default=''),
        'port': config('NO_REPLY_EMAIL_PORT', default=587, cast=int),
        'use_tls': config('NO_REPLY_EMAIL_USE_TLS', default=True, cast=bool),
    },
}


# Application definition

INSTALLED_APPS = [
    'django_celery_beat',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.humanize',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # 'permabots',
    #
    # 'rest_framework',
    # 'rest_framework.authtoken',
    # 'rest_auth',
    #
    # 'allauth',
    # 'allauth.account',
    # 'rest_auth.registration',

    # 'telegram.apps.TelegramBotConfig',
    # 'telegram',
    'account.apps.AccountConfig',
    # 'django_telegrambot.apps.DjangoTelegramBot',
    'django_telegrambot',
    'bootstrapform',
    'bot.apps.BotClient',
]

if DEBUG:
    # INSTALLED_APPS.append("sslserver")
    pass

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = PROJECT_NAME+'.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'paginate': 'bot.templatetags.paginator',
            }
        },
    },
]

WSGI_APPLICATION = PROJECT_NAME + '.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT', default=3306),
        'OPTIONS': {
            # 'local_infile': 1,
            'charset': 'utf8mb4',
            # 'default-character-set': 'utf8mb4',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'init_command': "SET default_storage_engine='INNODB'",
        }
    }
}



AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

DJANGO_REDIS_IGNORE_EXCEPTIONS = True
DJANGO_REDIS_LOG_IGNORED_EXCEPTIONS = True
# SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# SESSION_CACHE_ALIAS = "default"
# DJANGO_REDIS_LOGGER = 'some.specified.logger'
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # "PASSWORD": "mysecret",
            "PICKLE_VERSION": -1,  # Use the latest protocol version
            "SOCKET_CONNECT_TIMEOUT": 5,  # in seconds
            "SOCKET_TIMEOUT": 5,  # in seconds
            "IGNORE_EXCEPTIONS": True,
        }
    }
}

CELERY_BROKER_TRANSPORT = 'redis'
CELERY_BROKER_URL = 'redis://127.0.0.1:6379'
# CELERY_BROKER_URL = 'redis+socket:///var/run/redis/redis.sock'
# CELERY_BROKER_URL = 'redis://:password@host:port/db'
# CELERY_BROKER_URL = 'amqp://guest:guest@localhost//'

#: Only add pickle to this list if your broker is secured
#: from unwanted access (see userguide/security.html)
CELERY_ACCEPT_CONTENT = ['json']
# CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Lagos'

# CELERY_CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
# CELERYBEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'


STATIC_URL = '/static/'
MEDIA_URL = '/media/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
STATICFILES_DIRS = [os.path.join(BASE_DIR, "media/"), os.path.join(BASE_DIR, PROJECT_NAME+"/"+TEMPLATE_THEME+"/"), os.path.join(BASE_DIR, PROJECT_NAME+"/assets/")]


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },

    'formatters': {
        'verbose': {
            # ERROR|25/Apr/2017 17:30:22|basehttp|25069|139803081283328|"POST /system/secured/admin/core/package/add/ HTTP/1.1" 500 59
            'format': '%(levelname)s|%(asctime)s|%(module)s|%(process)d|%(thread)d|%(message)s',
            'datefmt': "%Y-%d-%b %H:%M:%S"
        },
        'standard': {
            # [ERROR]25-Apr-2017 17:52:24|django.server|"POST /system/secured/admin/core/package/add/ HTTP/1.1" 500 59
            'format': '[%(levelname)s]%(asctime)s|%(name)s|%(message)s',
            'datefmt': "%Y-%m-%d %H:%M:%S"
        },
        'simple': {'format': '%(levelname)s|%(asctime)s|%(message)s', 'datefmt': "%Y-%m-%d %H:%M:%S"},
        'too-simple': {'format': '%(message)s'},
    },

    'handlers': {
        'null': {
            'level': LOGGING_LEVEL,
            'class': 'logging.NullHandler',
        },
        'mail_admins': {
            'level': LOGGING_LEVEL,
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            'email_backend': 'django.core.mail.backends.smtp.EmailBackend',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'too-simple',
            'stream': sys.stdout,
        },
        'log_file': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, PROJECT_NAME + '.log'),
            'maxBytes': 1024 * 1024 * 5,  # 5MB
            'backupCount': 5,
            'formatter': 'standard',
        },
    },

    'loggers': {
        PROJECT_NAME + '.tasks': {
            'handlers': ['mail_admins'],
            'propagate': True,
        },
        PROJECT_NAME+'.*': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['log_file'],
            'propagate': True,
        },
        'django.security.*': {
            'handlers': ['mail_admins', 'log_file'],
            'propagate': True,
        },
        'django.security.DisallowedHost': {
            'handlers': ['null'],
            'propagate': False,
        },
        'django_redis.cache': {
            'handlers': ['log_file', 'console'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['mail_admins', 'log_file'],
            'propagate': True,
        },
        'django': {
            'handlers': ['log_file', 'console'],
            'propagate': True,
        },
        'root': {
            'handlers': ['console'],
        }
    },
}

# You can tell Django to stop reporting particular 404s by tweaking the IGNORABLE_404_URLS setting.
IGNORABLE_404_URLS = [
    re.compile(r'\.(php|cgi)$'),
    re.compile(r'^/phpmyadmin/'),
    re.compile(r'^/apple-touch-icon.*\.png$'),
    re.compile(r'^/favicon\.ico$'),
    re.compile(r'^/robots\.txt$'),
]


try:
    from config.local_settings import *
except ImportError:
    pass

